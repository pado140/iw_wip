/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import admin.util.feedData;
import connection.ConnectionDb;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Duvers
 */
public class Sewing_prod extends javax.swing.JInternalFrame {
    private final ConnectionDb conn = ConnectionDb.instance();
    private DefaultTableModel tbm;
    private Set<Object[]> datalist;
    private String Erreur;
    private Map<Integer,Integer> hourstable=new HashMap<>();
    /**
     * Creates new form Sewing_prod
     */
    public Sewing_prod() {
        
        initComponents();
        tbm = (DefaultTableModel) Log.getModel();
        hourstable.put(8, 13);
        hourstable.put(7, 13);
        for(int i=1;i<=12;i++){
            hourstable.put(8+i,i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Log = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Scan Production");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        jTextField1.setFocusCycleRoot(true);

        jLabel1.setText("Sewing Traveler");

        Log.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STICKER", "STATUS", "MESSAGE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Log);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(868, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()==10){
            System.out.println(evt.getKeyCode()==10);
            if(jTextField1.getText().trim().isEmpty()){
                return;
            }
                act();
                //mostrar();
                //load();
                jTextField1.setText("");
        }
        
    }//GEN-LAST:event_jTextField1KeyReleased

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // TODO add your handling code here:
        //mostrar();
                jTextField1.setText("");
    }//GEN-LAST:event_formInternalFrameActivated


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Log;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

private synchronized boolean get(String sew){
    boolean check=false;
    Erreur="";
    //tbm.setRowCount(0);
    //Pattern p=Pattern.compile("[");
    String requete="select * from production_scan where Slot=?";
    System.out.println(requete);
    ResultSet rs=conn.select(requete, sew);
    boolean exist=false,used=false, valid=true,closed=true;
    String sewing_t="",item="",type="",lot="",module="",build="";
    Date dat=new Date();
    int bar=29;
    int id=0;
    int qty=0,QTY_CUT=0;
    Object[] data=new Object[8];
        try {
            while(rs.next()){
                exist=true;
                type=rs.getString("type_sew").trim();
                id=rs.getInt("sew_id");
                if(rs.getInt("status")==1)
                    used=true;
                if(rs.getInt("status")==2)
                    valid=false;
                qty=rs.getInt("QTY_PER_LOT");
                closed=rs.getString("status_10").trim().equalsIgnoreCase("5");
                sewing_t=rs.getString("S_TRAVELLER").trim();
                item=rs.getString("slot");
                lot=rs.getString("lot_stickers");
                module=rs.getString("module");
                build="BLD "+rs.getString("workcenter");
                QTY_CUT=rs.getInt("qty");
                //dat=rs.getDate("modified");
            }   } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
            Erreur="Error please, try again";
            //JOptionPane.showMessageDialog(this, "Error please, try again");
        }
        System.out.println("closed:"+closed);
        if(!closed){
            if(exist){
                if(!used){
                    if(valid){
                    if(qty==0){
                        bar=balance(lot,QTY_CUT);
                        System.out.println("balance:"+bar);
                            if(bar>30)
                                bar=25;
                            Date mod=null;
                        if(type.equals("first")){
                            mod=lastInsertBlank(lot);

                        }else
                            mod=lastInsertSecond(lot);
                        if(mod!=null && type.equals("first")){
                            String date_mod=1900+mod.getYear()+"-";
                            date_mod+=mod.getMonth()+"-";
                            date_mod+=mod.getDate();

                            String dat_new=1900+dat.getYear()+"-";
                            dat_new+=dat.getMonth()+"-";
                            dat_new+=dat.getDate();
                            if(date_mod.equals(dat_new)){
                                Erreur="you cannot scan multiple blank stickers in a same date";
                                //JOptionPane.showMessageDialog(this, "you cannot scan multiple blank stickers in a same date");
                                return false;
                            }
                        }


                            //}



                        String option="";
                        try{
                        if(type.equals("ps")){
                        do{
                        option=JOptionPane.showInputDialog(this, "please Confirm quantity"
                                + "\n Quantity must inferior or equals to:"+QTY_CUT, "Confirmation", JOptionPane.WARNING_MESSAGE);
                        }while(option.trim().isEmpty() || Pattern.matches("\\d+",option)==false||Integer.parseInt(option)>QTY_CUT);
                        }else{
                        do{
                        option=JOptionPane.showInputDialog(this, "please Confirm quantity"
                                + "\n Quantity must inferior or equals to:"+bar, "Confirmation", JOptionPane.WARNING_MESSAGE);
                        }while(option.trim().isEmpty() || Pattern.matches("\\d+",option)==false||Integer.parseInt(option)>bar);
                        }
                        }catch(NullPointerException ex){
                            return false;
                        }
                        System.out.println(option);
                        qty=Integer.parseInt(option);
                            if(type.equalsIgnoreCase("first"))
                                setInvalid(first(lot));

                        setqty(Integer.parseInt(option),sew);


                        }

                    setSewn(sew);
                    if(!type.equalsIgnoreCase("ps")){
                        DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
                        Calendar c=Calendar.getInstance();
                        int hour=c.get(Calendar.HOUR_OF_DAY);
                    Thread feed=new feedData(qty, item, module, hourstable.get(hour), type.equalsIgnoreCase("first")?1:(type.equalsIgnoreCase("second")?2:3), build, df.format(new Date()));
                    feed.setDaemon(true);
                    feed.start();
                    }
                    String requete1="insert into TRANSAC(TRANSACT,ITEM,QTY,ACT_TYPE,ACT_NAME,SUB_ITEM,QTY_SUBITEM,user_id) values ('sewing',?,?,3,?,?,?,?)";
                        if(!conn.Update(requete1, 0, new Object[]{sewing_t,QTY_CUT,"sewing",item,qty,Principal.user_id})){
                            Erreur="Error please, try again";
                            return false;
                                //JOptionPane.showMessageDialog(this, "Error please, try again");
                        }
                        return true;
                    }else{
                        Erreur="This sticker you scan is invalid";
//                        JOptionPane.showMessageDialog(this, "This sticker you scan is invalid", "Alert", JOptionPane.ERROR_MESSAGE);
                    }
                }
                else
                {
                    Erreur="This sticker you scan is already scanned";
//                    JOptionPane.showMessageDialog(this, "This sticker you scan is already scanned", "Alert", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                Erreur="This sticker you scan is not exist";
//                JOptionPane.showMessageDialog(this, "This sticker you scan is not exist", "Alert", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            Erreur="This workorder is already close";
//                JOptionPane.showMessageDialog(this, "This workorder is already close", "Alert", JOptionPane.ERROR_MESSAGE);
            }
     return false;   
}
   
    
    private boolean setqty(int qty,String sew){
        String requete="update sewing_production set qty_updated=0 ,QTY_PER_LOT=? ,date_updated=getDate() where slot=?";
        return conn.Update(requete, 0, new Object[]{qty,sew});
    }
    
    private int first(String trave){
        String requete="select min(sew_id) SEW_ID from sewing_production where lot_stickers=? and STATUS=0 and QTY_PER_LOT<>0";
        ResultSet rs=conn.select(requete,trave);
        int id=0;
        try {
            while(rs.next()){
                id=rs.getInt("sew_id");
                 }   
        } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    private boolean setSewn(String sew){
        String requete="update sewing_production set status=1, modified=getdate() where slot=?";
        return conn.Update(requete, 0, new Object[]{sew});
    }
    private boolean setInvalid(int id){
        String requete="update sewing_production set status=2,modified=getdate() where sew_id=?";
        return conn.Update(requete, 0, id);
    }
    private Date lastInsertBlank(String s_traveller){
        String requete="select max(modified) modified from sewing_production where lot_stickers=? and STATUS=2 and type_sew='first'";
        ResultSet rs=conn.select(requete,s_traveller);
        Date dat=null;
        try {
            while(rs.next()){
                dat=rs.getDate("modified");
                 }   
        } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dat;
    }
    
    private void act(){
        String text=jTextField1.getText().trim();
                scan ac=new scan(text);
//                T ac=new T(text,modulo);
                Thread t=new Thread(ac);
                t.start();
    }
    private Date lastInsertSecond(String s_traveller){
        String requete="select max(modified) modified from sewing_production where lot_stickers=? and STATUS=1 and type_sew='second'";
        ResultSet rs=conn.select(requete,s_traveller);
        Date dat=null;
        try {
            while(rs.next()){
                dat=rs.getDate("modified");
                 }   
        } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dat;
    }
    
    private int entry(String travel){
        String requete="select sum(QTY_PER_LOT) qty from sewing_production where lot_stickers=? and status=1 and type_sew<>'ps' ";
        ResultSet rs=conn.select(requete,travel);
        int id=0;
        try {
            while(rs.next()){
                id=rs.getInt("qty");
                 }   
        } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    
    private int balance(String trave,int val){
        return val-entry(trave);
    }
    
    class scan implements Runnable{

    private String text;
    private int lineSelected;
    
    public scan(String text){
        this.text=text;
        tbm.addRow(new Object[]{text,"Pending","waiting"});
        lineSelected=tbm.getRowCount()-1;
    }
        @Override
        public void run() {
            tbm.setValueAt("Running", lineSelected, 1);
            if(get(text)){
                tbm.setValueAt("Success", lineSelected, 2);
                tbm.setValueAt("Ok", lineSelected, 1);
            }else{
                tbm.setValueAt(Erreur, lineSelected, 2);
               tbm.setValueAt("Fail", lineSelected, 1);
               //Log.getColumnModel().getColumn();
            }
            
        }
        
    
}
    
}