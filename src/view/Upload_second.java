/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import Load_data.loadFrame;
import connection.ConnectionDb;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Padovano
 */
public class Upload_second extends javax.swing.JInternalFrame {
private ConnectionDb conn = ConnectionDb.instance();
private DefaultTableModel tbm,tbm1;
private String Erreur="";
private String inputFile;
List<Object[]> data=null;
private SimpleDateFormat formatter=new SimpleDateFormat("MM/dd/yyyy");
DataFormatter formatdata;
private JFileChooser fileChooser;
    /**
     * Creates new form packing
     */
    public Upload_second() {
        initComponents();
        
        fileChooser=new JFileChooser("C:/",FileSystemView.getFileSystemView());
        fileChooser.setDialogTitle("Ouvrir le fichier");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Workbook excel","xlsx","xls"));
        tbm = (DefaultTableModel) GRID_DATA.getModel();
        tbm1 = (DefaultTableModel) Log.getModel();
        formatdata=new DataFormatter();
        mostrar();
    }
    private boolean setSewn(String sew,int qty,String modified){
        String requete="update sewing_production set status=1,qty_per_lot=?, modified=? where slot=?";
        return conn.Update(requete, 0, new Object[]{qty,modified,sew});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GRID_DATA = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Log = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Packed");

        jButton3.setText("Upload Excel file");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(795, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        GRID_DATA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Customer", "PO", "SKU", "SECOND", "STICKERS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(GRID_DATA);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 913, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jSplitPane1.setLeftComponent(jPanel2);

        Log.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "STICKERS", "STATUS", "MESSAGE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Log);
        if (Log.getColumnModel().getColumnCount() > 0) {
            Log.getColumnModel().getColumn(0).setMinWidth(200);
            Log.getColumnModel().getColumn(0).setMaxWidth(200);
            Log.getColumnModel().getColumn(1).setMinWidth(100);
            Log.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 70, Short.MAX_VALUE)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        File selectedFile = null;
          
int result1 = fileChooser.showOpenDialog(this);
int type=0;
if (result1 == JFileChooser.APPROVE_OPTION) {
    selectedFile = fileChooser.getSelectedFile();
    System.out.println("Selected file: " + selectedFile.getName());
    
    String ext="";
           ext =selectedFile.getName().substring(selectedFile.getName().lastIndexOf(".")+1);
            System.out.println("Selected file ext: " + ext);
            
            if(ext.equals("xlsx"))
                type=1;
            if(ext.equals("xls"))
                type=2;
    if(type!=0){                
                 setInputFile(selectedFile.getAbsolutePath());
         try {
             read(type);
         } catch (IOException ex) {
             Logger.getLogger(loadFrame.class.getName()).log(Level.SEVERE, null, ex);
         }   
    }else{
        JOptionPane.showMessageDialog(this, "This file can't be open\nplease verify", "Error", JOptionPane.ERROR_MESSAGE);
    }      
            
           
}     
    }//GEN-LAST:event_jButton3ActionPerformed

    public void setInputFile(String inputFile) {
                this.inputFile = inputFile;
        }
     
 	 		  	 	  	   	  

    private boolean checkHeader(List<Object> data){
         Map<Integer, String> titre=new HashMap<>();
            titre.put(0,"DATE BOX");
            titre.put(1,"STICKER #");
            titre.put(2,"TOTAL");
            
         System.out.println(titre);
         boolean valid=true;
         String text="";
         if(data.isEmpty())
             valid=false;
         else{
             if(titre.size()==data.size()){
         for(Map.Entry<Integer,String> st:titre.entrySet()){
             text+=st.getValue()+" \t ";
             if(!st.getValue().equals(data.get(st.getKey()))){
                valid=false; 
                
             }
         }
         }
             else{
                 JOptionPane.showMessageDialog(this, "please use the right format,check the file\n"
                         + "the header can be corrupted");
             }
         }
         if(!valid)
         JOptionPane.showMessageDialog(this, "please use the right format, the header must be like below\n"+text);
        return valid;
    }
        
    public void read(int type) throws IOException  {
        FileInputStream fis = new FileInputStream(inputFile);
        Sheet sheet=null;
        Workbook book1=null;
        if(type==1)
            book1 = new XSSFWorkbook(fis);
        if(type==2)
            book1 = new HSSFWorkbook(fis);
        
        sheet = book1.getSheetAt(0);
        Map<Integer,String> obj=new HashMap<>();
        Iterator<Row> itr = sheet.iterator();
        List<Object> datarow=null;
        List<Object> titre=new ArrayList<>();
        try{
           // Iterating over Excel file in Java
            int i=0;
            Row tit=sheet.getRow(0);
            Cell ce=tit.getCell(i);
                tit=sheet.getRow(0);
                data=new ArrayList<>();
                Iterator<Cell> cellIte=tit.cellIterator();
                while (cellIte.hasNext()) {
                    Cell cell = cellIte.next();
                    String val=formatdata.formatCellValue(cell).trim();
                    titre.add(val);
                }
                if(!checkHeader(titre))
                    return;
                
                int k=0;
                itr.next();
                while (itr.hasNext()) {
                    Object o=null;
                    Row row = itr.next();
                    ce=row.getCell(0);
                    String val=formatdata.formatCellValue(ce).trim();
                    System.out.println("valeur:"+val);
                    if(val.isEmpty())
                        return;
                    try{
                    Object[] rowdata=new Object[3];
                    ///////tbm.addRow(new Object[titre.size()]);
                    //linetoignore++;
                // Iterating over each column of Excel file 
                Iterator<Cell> cellIterator = row.cellIterator();
                int j=0;
                while (cellIterator.hasNext()) {
                    
                    ce = cellIterator.next();
                    val=formatdata.formatCellValue(ce).trim();
                    System.out.println("valeur:"+val);
                    rowdata[j]=val;
                    if(j>2){
                         rowdata[j]=Integer.valueOf(val);
                    }
                
                j++;
                }
                T ac=new T(rowdata[1].toString(), rowdata[0].toString(), Integer.parseInt(rowdata[2].toString()));
                Thread t=new Thread(ac);
                t.start();
                    }catch(NullPointerException e){
                        e.printStackTrace();
                    }
                    k++;
                    }
                
 fis.close();
 } catch (FileNotFoundException fe) {
 } catch (IOException ie) {
 } 
} 
    private void mostrar(){
    tbm.setRowCount(0);
    tbm1.setRowCount(0);
    String requete="select * from second_consolidation where qty<>0";
    System.out.println(requete);
    ResultSet rs=conn.select(requete);
        try {
            while(rs.next()){
             
                   Object[] data=new Object[5];
                   data[0]=rs.getString("customer");
                   data[1]=rs.getString("po");
                   data[2]=rs.getString("sku");
                   data[3]=rs.getInt("qty");
                   data[4]=rs.getString("sticker");
                  
                   tbm.addRow(data);
            }   } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    
    private void get(String sew,int qtyscan,String date,int line){
    
    //tbm.setRowCount(0);
    //Pattern p=Pattern.compile("[");
    String requete="select * from production_scan where Slot=?";
    System.out.println(requete);
    ResultSet rs=conn.select(requete, sew);
    boolean exist=false,used=false, valid=true,closed=true;
    String sewing_t="",item="",type="",lot="",po="",sku="",customer="";
    Date dat=new Date();
    int bar=29;
    int id=0;
    int qty=0,QTY_CUT=0;
    Object[] data=new Object[5];
        try {
            while(rs.next()){
                exist=true;
                type=rs.getString("type_sew");
                id=rs.getInt("sew_id");
                if(rs.getInt("status")==1)
                    used=true;
                if(rs.getInt("status")==2)
                    valid=false;
                qty=rs.getInt("QTY_PER_LOT");
                closed=rs.getString("status_10").trim().equalsIgnoreCase("5");
                sewing_t=rs.getString("S_TRAVELLER").trim();
                item=rs.getString("slot");
                lot=rs.getString("lot_stickers");
                QTY_CUT=rs.getInt("qty");
                po=rs.getString("cusord_10");
                sku=rs.getString("prtnum_10");
                customer=rs.getString("planid_10");
                //dat=rs.getDate("modified");
            }   } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(!closed){
            if(exist){
                if(!used){
                    if(valid){
                        bar=balance(lot,QTY_CUT);
                        if(qtyscan>bar){
                            
                            tbm1.setValueAt("Quantity must inferior or equals to:"+bar, line, 2);
                            tbm1.setValueAt("Fail", line, 1);
                            return;
                        }

                    setSewn(sew,qtyscan,date);


                    data[0]=customer;
                       data[1]=po;
                       data[2]=sku;
                       data[3]=qtyscan;
                       data[4]=sew;
                       tbm.addRow(data);
                       tbm1.setValueAt("succes", line, 2);
                       tbm1.setValueAt("Ok", line, 1);


                    String requete1="insert into TRANSAC(TRANSACT,ITEM,QTY,ACT_TYPE,ACT_NAME,SUB_ITEM,QTY_SUBITEM,user_id) values ('sewing',?,?,3,?,?,?,?)";
                        conn.Update(requete1, 0, new Object[]{sewing_t,QTY_CUT,"sewing",item,qtyscan,Principal.user_id});
                    }else{
                     tbm1.setValueAt("This sticker you scan is invalid", line, 2);
                     tbm1.setValueAt("Fail", line, 1);
                    }
                }
                else
                {
                    tbm1.setValueAt("This sticker you scan is already scanned", line, 2);
                     tbm1.setValueAt("Fail", line, 1);
                }
            }else{
                tbm1.setValueAt("This sticker you scan is not exist", line, 2);
                tbm1.setValueAt("Fail", line, 1);
            }
        }else{
                tbm1.setValueAt("This workorder is already close", line, 2);
                tbm1.setValueAt("Fail", line, 1);
            }
        
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable GRID_DATA;
    private javax.swing.JTable Log;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
class T implements Runnable{

    private String text,date;
    private int lineSelected,qty;
    
    public T(String text,String date,int qty){
        this.text=text;
        this.date=date;
        tbm1.addRow(new Object[]{text,"Pending","waiting"});
        lineSelected=tbm1.getRowCount()-1;
        this.qty=qty;
    }
        @Override
        public void run() {
            tbm1.setValueAt("Running", lineSelected, 1);
            System.out.println("exec");
            get(text, qty, date,lineSelected);
        }
        
    
}

private int entry(String travel){
        String requete="select [qty_sewn] qty from sewn_production where lot_stickers=?";
        ResultSet rs=conn.select(requete,travel);
        int id=0;
        try {
            while(rs.next()){
                id=rs.getInt("qty");
                 }   
        } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    
    private int balance(String trave,int val){
        return val-entry(trave);
    }
}

