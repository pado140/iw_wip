/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import connection.ConnectionDb;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Padovano
 */
public class create_batch extends javax.swing.JInternalFrame {
private final ConnectionDb conn = ConnectionDb.instance();
private DefaultTableModel tbm,tbm_error ;
private boolean create;
private Set<String> listlpn;
private String ErrorLpn,po,style,color,customer;
private int idBatch;
private String status;
    /**
     * Creates new form create_batch
     */
    public create_batch() {
        initComponents();
        //init();
        batch_no.setText(String.valueOf(lastBatch()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        batch_no = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        count = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        grid_data = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        grid_error = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Create Batch");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Scan Lpn");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        jTextField1.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Batch No.");

        jLabel3.setText("Box:");

        jButton1.setText("Create New");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(batch_no, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(count)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(batch_no, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        grid_data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "LPN", "PO", "STYLE", "DESCRIPTION", "COLOR CODE", "COLOR", "SIZE", "QTY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(grid_data);

        grid_error.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "lpn", "Error"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(grid_error);
        if (grid_error.getColumnModel().getColumnCount() > 0) {
            grid_error.getColumnModel().getColumn(0).setMinWidth(150);
            grid_error.getColumnModel().getColumn(0).setMaxWidth(150);
            grid_error.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 888, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
         if(evt.getKeyCode()==10){
            System.out.println(evt.getKeyCode()==10);
            if(!jTextField1.getText().trim().isEmpty())
                if(set(jTextField1.getText().trim())){
                mostrar();
                count.setText(String.valueOf(grid_data.getRowCount()));
                }
            jTextField1.setText("");
        }
        
    }//GEN-LAST:event_jTextField1KeyReleased

    private void init(){
        listlpn=new HashSet<>();
        create=false;
        tbm= (DefaultTableModel) grid_data.getModel();
        tbm.setRowCount(0);
        jTextField1.setEnabled(true);
        tbm_error= (DefaultTableModel) grid_error.getModel();
        tbm_error.setRowCount(0);
        
        count.setText("0");
        if(!create){
            create=true;
            idBatch=lastBatch();
            if(!getStatus(lastBatch()).equalsIgnoreCase("created")){
                String req="insert into batches(status,[qty_box]) values (?,?)";
                if(conn.Update(req, 1, "created",0))
                idBatch=conn.getLast();
                }
        }
        batch_no.setText(String.valueOf(idBatch));
    }
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        mostrar();
    }//GEN-LAST:event_formInternalFrameOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        init();
    }//GEN-LAST:event_jButton1ActionPerformed

    private int canCreate(){
        
        return 0;
    }
    private boolean canScan(Object[] ob,String lpn){
        ErrorLpn=null;
        try{
            if(!listlpn.contains(lpn)){
                Object[] data=ob;
                int stat=Integer.parseInt(data[1].toString());
                System.out.println(stat);
                if(stat==0){
                    String co= data[5].toString().replace(".","-").split("-")[1]+"-"+data[4].toString().trim();
                    String st=data[5].toString().replace(".","-").split("-")[0];
                    if(!data[3].toString().trim().equalsIgnoreCase(po)|| !st.equalsIgnoreCase(style)
                            || !co.equalsIgnoreCase(color)||!data[6].toString().equalsIgnoreCase(customer)){
                        ErrorLpn="sku different.";
                    JOptionPane.showMessageDialog(this, "This Lpn cant be scan \n\t "
                        + "- sku different.", "error scanning", JOptionPane.ERROR_MESSAGE);
                    return false;
                    }
                    return true;
                }else if(Integer.parseInt(data[2].toString())!=0){
                    System.out.println(data[2]);
                    ErrorLpn="already shipped.";
                    JOptionPane.showMessageDialog(this, "This Lpn cant be scan \n\t "
                        + "- already shipped.", "error scanning", JOptionPane.ERROR_MESSAGE);
                }else{
                 JOptionPane.showMessageDialog(this, "This Lpn cant be scan \n\t "
                    + "- already scan on another batch.", "error scanning", JOptionPane.ERROR_MESSAGE); 
                 ErrorLpn="already scan on another batch.";
                }
            }else{
             JOptionPane.showMessageDialog(this, "This Lpn cant be scan \n\t "
                    + "- already scan on this batch.", "error scanning", JOptionPane.ERROR_MESSAGE);
             ErrorLpn="already scan on this batch.";
            }
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(this, "This Lpn cant be scan \n\t "
                    + "- not packed yet from wip.", "error scanning", JOptionPane.ERROR_MESSAGE);
            ErrorLpn="Not Valid by WIP.";
        }
        return false;
    }
    private int lastBatch(){
        int no=0;
        String requete="select max(id) nb from batches";
        ResultSet rs=conn.select(requete);
    try {
        try{
        rs.first();
        no=rs.getInt("nb");
        }catch(NullPointerException e){
            no=0;
        }
    } catch (SQLException ex) {
        Logger.getLogger(create_batch.class.getName()).log(Level.SEVERE, null, ex);
    }
        return no;
    }

    private boolean set(String lpn){
        Object[] data=getLpn(lpn);
        int idlpn=0;
        boolean istrue=true;
        if(getStatus(idBatch).equals("packed")||getStatus(idBatch).equals("created")){
            if(getStatus(idBatch).equals("created")){
                try{
                po=data[3].toString().trim();
                style=data[5].toString().replace(".","-").split("-")[0];
                color=data[5].toString().replace(".","-").split("-")[1]+"-"+data[4].toString().trim();
                customer=data[6].toString();
                String req="update batches set status=?, style=?, po=?, color=? ,customer=? where id=?";
                conn.Update(req, 1, "packed",style,po,color,customer,idBatch);
                }catch(NullPointerException e){
            
        }
            }
        if(canScan(data,lpn)){
            listlpn.add(lpn);
            idlpn=Integer.parseInt(data[0].toString());
        
        if(istrue){
        String requete="insert into batches_lpn(batch_id,lpn_id,status) values(?,?,?)";
        istrue=conn.Update(requete, 0,idBatch, idlpn,"open");
        }
        if(istrue){
        String requete="update box_contain set status=1 where id=?";
        istrue=conn.Update(requete, 0, idlpn);
        }
        }else{
            tbm_error.addRow(new Object[]{lpn,ErrorLpn});
        }
        }else{
            JOptionPane.showMessageDialog(this, "This batch is already Audited");
        }
        //String
        return istrue;
    }
    
    private void mostrar(){
        tbm= (DefaultTableModel) grid_data.getModel();
        tbm.setRowCount(0);
        String requete="select * from lpn_in_batch where batch_id=? ";
        ResultSet rs=conn.select(requete,Integer.parseInt(batch_no.getText()));
    try {
        while(rs.next()){
            tbm.addRow(new Object[]{
            rs.getString("lpn"),rs.getString("ponum"),rs.getString("style"),rs.getString("description"),
                rs.getString("sku").replace('.', '-').split("-")[1],
            rs.getString("coldsp"),rs.getString("size"),rs.getInt("qty")});
        }
    } catch (SQLException ex) {
        Logger.getLogger(create_batch.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    
    private String getStatus(int id){
        String requete="select status from batches where id=?";
        
        ResultSet rs=conn.select(requete, id);
    try {
        while (rs.next())
            return rs.getString("status");
    } catch (SQLException ex) {
        Logger.getLogger(create_batch.class.getName()).log(Level.SEVERE, null, ex);
    }
        return null;
    }
    private Object[] getLpn(String lpn){
        String requete="select * from lpn_packed where lpn=? or box_stickers=?";
        ResultSet rs=conn.select(requete,jTextField1.getText().trim(),jTextField1.getText().trim());
    try {
        while(rs.next()){
            return new Object[]{
            rs.getString("id"),rs.getString("status"),rs.getInt("shipment_id"),rs.getString("ponum"),rs.getString("coldsp"),rs.getString("sku"),rs.getString("brand")};
        }
    } catch (SQLException ex) {
        Logger.getLogger(create_batch.class.getName()).log(Level.SEVERE, null, ex);
    }
    return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel batch_no;
    private javax.swing.JLabel count;
    private javax.swing.JTable grid_data;
    private javax.swing.JTable grid_error;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
